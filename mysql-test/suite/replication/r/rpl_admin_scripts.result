Test case 1 - test failover scripts
# Checking privileges.
# Checking privileges on candidates.
# Performing failover.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Candidate slave localhost:PORT4 will become the new master.
# Checking slaves status (before failover).
# Preparing candidate for failover.
# Reading events in relay log for slave 127.0.0.1:PORT2
# No missing transactions found on 127.0.0.1:PORT2. Skipping connection of candidate as slave.
# Reading events in relay log for slave localhost:PORT3
# No missing transactions found on localhost:PORT3. Skipping connection of candidate as slave.
# Reading events in relay log for slave localhost:PORT4
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 WARN - slave is not configured with this master
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT4 Ok
# Switching slaves to new master.
# Change master command for 127.0.0.1:PORT2
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Change master command for localhost:PORT3
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Disconnecting new master as slave.
# Execute on localhost:PORT4: RESET SLAVE ALL
# Starting slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# Failover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 2 - test switchover scripts
# Checking privileges.
# WARNING: You may be mixing host names and IP addresses. This may result in negative status reporting if your DNS services do not support reverse name lookup.
# Performing switchover from master at localhost:PORT1 to slave at localhost:PORT4.
# Checking candidate slave prerequisites.
# GTID_MODE=ON is set for all servers.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   Slave connected to master ... Ok
#   GTID_MODE=ON ... Ok
#   Logging filters agree ... Ok
#   Replication user exists ... Ok
# Checking slaves configuration to master.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT1
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Blocking writes on master.
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT1.
# Waiting for slaves to catch up to old master.
# Slave 127.0.0.1:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT3:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT4:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 Ok
# Read only is XXX for localhost:PORT1.
# UNLOCK STRING: UNLOCK TABLES
# Demoting old master to be a slave to the new master.
# Switching slaves to new master.
# Executing CHANGE MASTER on 127.0.0.1:PORT2.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT3.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT1.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Starting all slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT1 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT4
# new master host: 
# new master port: 
# Script completed Ok.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# localhost:PORT1 status: Ok 
# Switchover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 3 - test script exit < threshold switchover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# WARNING: You may be mixing host names and IP addresses. This may result in negative status reporting if your DNS services do not support reverse name lookup.
# Performing switchover from master at localhost:PORT1 to slave at localhost:PORT4.
# Checking candidate slave prerequisites.
# GTID_MODE=ON is set for all servers.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   Slave connected to master ... Ok
#   GTID_MODE=ON ... Ok
#   Logging filters agree ... Ok
#   Replication user exists ... Ok
# Checking slaves configuration to master.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT1
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
ERROR: XXX Script failed.
# Blocking writes on master.
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT1.
# Waiting for slaves to catch up to old master.
# Slave 127.0.0.1:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT3:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT4:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 Ok
# Read only is XXX for localhost:PORT1.
# UNLOCK STRING: UNLOCK TABLES
# Demoting old master to be a slave to the new master.
# Switching slaves to new master.
# Executing CHANGE MASTER on 127.0.0.1:PORT2.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT3.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT1.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Starting all slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT1 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT4
# new master host: 
# new master port: 
# Script completed Ok.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# localhost:PORT1 status: Ok 
# Switchover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 4 - test script exit = threshold switchover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# WARNING: You may be mixing host names and IP addresses. This may result in negative status reporting if your DNS services do not support reverse name lookup.
# Performing switchover from master at localhost:PORT1 to slave at localhost:PORT4.
# Checking candidate slave prerequisites.
# GTID_MODE=ON is set for all servers.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   Slave connected to master ... Ok
#   GTID_MODE=ON ... Ok
#   Logging filters agree ... Ok
#   Replication user exists ... Ok
# Checking slaves configuration to master.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT1
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
# Before script failed!
# Blocking writes on master.
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT1.
# Waiting for slaves to catch up to old master.
# Slave 127.0.0.1:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT3:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT4:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 Ok
# Read only is XXX for localhost:PORT1.
# UNLOCK STRING: UNLOCK TABLES
# Demoting old master to be a slave to the new master.
# Switching slaves to new master.
# Executing CHANGE MASTER on 127.0.0.1:PORT2.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT3.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT1.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Starting all slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT1 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT4
# new master host: 
# new master port: 
# Script completed Ok.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# localhost:PORT1 status: Ok 
# Switchover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 5 - test script exit > threshold switchover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# WARNING: You may be mixing host names and IP addresses. This may result in negative status reporting if your DNS services do not support reverse name lookup.
# Performing switchover from master at localhost:PORT1 to slave at localhost:PORT4.
# Checking candidate slave prerequisites.
# GTID_MODE=ON is set for all servers.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   Slave connected to master ... Ok
#   GTID_MODE=ON ... Ok
#   Logging filters agree ... Ok
#   Replication user exists ... Ok
# Checking slaves configuration to master.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT1
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
# Before script failed!
# Blocking writes on master.
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT1.
# Waiting for slaves to catch up to old master.
# Slave 127.0.0.1:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT3:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT4:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 Ok
# Read only is XXX for localhost:PORT1.
# UNLOCK STRING: UNLOCK TABLES
# Demoting old master to be a slave to the new master.
# Switching slaves to new master.
# Executing CHANGE MASTER on 127.0.0.1:PORT2.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT3.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT1.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Starting all slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT1 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT4
# new master host: 
# new master port: 
# Script completed Ok.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# localhost:PORT1 status: Ok 
# Switchover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 6 - test script exit < threshold switchover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# WARNING: You may be mixing host names and IP addresses. This may result in negative status reporting if your DNS services do not support reverse name lookup.
# Performing switchover from master at localhost:PORT1 to slave at localhost:PORT4.
# Checking candidate slave prerequisites.
# GTID_MODE=ON is set for all servers.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   Slave connected to master ... Ok
#   GTID_MODE=ON ... Ok
#   Logging filters agree ... Ok
#   Replication user exists ... Ok
# Checking slaves configuration to master.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT1
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Blocking writes on master.
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT1.
# Waiting for slaves to catch up to old master.
# Slave 127.0.0.1:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT3:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT4:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 Ok
# Read only is XXX for localhost:PORT1.
# UNLOCK STRING: UNLOCK TABLES
# Demoting old master to be a slave to the new master.
# Switching slaves to new master.
# Executing CHANGE MASTER on 127.0.0.1:PORT2.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT3.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT1.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Starting all slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT1 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT4
# new master host: 
# new master port: 
# Returning code 10
ERROR: XXX Script failed.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# localhost:PORT1 status: Ok 
# Switchover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 7 - test script exit = threshold switchover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# WARNING: You may be mixing host names and IP addresses. This may result in negative status reporting if your DNS services do not support reverse name lookup.
# Performing switchover from master at localhost:PORT1 to slave at localhost:PORT4.
# Checking candidate slave prerequisites.
# GTID_MODE=ON is set for all servers.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   Slave connected to master ... Ok
#   GTID_MODE=ON ... Ok
#   Logging filters agree ... Ok
#   Replication user exists ... Ok
# Checking slaves configuration to master.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT1
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Blocking writes on master.
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT1.
# Waiting for slaves to catch up to old master.
# Slave 127.0.0.1:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT3:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT4:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 Ok
# Read only is XXX for localhost:PORT1.
# UNLOCK STRING: UNLOCK TABLES
# Demoting old master to be a slave to the new master.
# Switching slaves to new master.
# Executing CHANGE MASTER on 127.0.0.1:PORT2.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT3.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT1.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Starting all slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT1 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT4
# new master host: 
# new master port: 
# Returning code 10
# After script failed!
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# localhost:PORT1 status: Ok 
# Switchover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 8 - test script exit > threshold switchover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# WARNING: You may be mixing host names and IP addresses. This may result in negative status reporting if your DNS services do not support reverse name lookup.
# Performing switchover from master at localhost:PORT1 to slave at localhost:PORT4.
# Checking candidate slave prerequisites.
# GTID_MODE=ON is set for all servers.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   Slave connected to master ... Ok
#   GTID_MODE=ON ... Ok
#   Logging filters agree ... Ok
#   Replication user exists ... Ok
# Checking slaves configuration to master.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT1
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Blocking writes on master.
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT1.
# Waiting for slaves to catch up to old master.
# Slave 127.0.0.1:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT3:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Slave localhost:PORT4:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD[...]
# Return Code = XXX
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 Ok
# Read only is XXX for localhost:PORT1.
# UNLOCK STRING: UNLOCK TABLES
# Demoting old master to be a slave to the new master.
# Switching slaves to new master.
# Executing CHANGE MASTER on 127.0.0.1:PORT2.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT3.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT1.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Starting all slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT1 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  localhost
# old master port:  PORT4
# new master host: 
# new master port: 
# Returning code 10
# After script failed!
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# localhost:PORT1 status: Ok 
# Switchover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 9 - test script exit < threshold failover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# Checking privileges on candidates.
# Performing failover.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Candidate slave localhost:PORT4 will become the new master.
# Checking slaves status (before failover).
# Preparing candidate for failover.
# No missing transactions found on 127.0.0.1:PORT2. Skipping connection of candidate as slave.
# No missing transactions found on localhost:PORT3. Skipping connection of candidate as slave.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
ERROR: XXX Script failed.
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 WARN - slave is not configured with this master
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT4 Ok
# Switching slaves to new master.
# Change master command for 127.0.0.1:PORT2
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Change master command for localhost:PORT3
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Disconnecting new master as slave.
# Execute on localhost:PORT4: RESET SLAVE ALL
# Starting slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# Failover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 10 - test script exit = threshold failover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# Checking privileges on candidates.
# Performing failover.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Candidate slave localhost:PORT4 will become the new master.
# Checking slaves status (before failover).
# Preparing candidate for failover.
# No missing transactions found on 127.0.0.1:PORT2. Skipping connection of candidate as slave.
# No missing transactions found on localhost:PORT3. Skipping connection of candidate as slave.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
# Before script failed!
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 WARN - slave is not configured with this master
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT4 Ok
# Switching slaves to new master.
# Change master command for 127.0.0.1:PORT2
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Change master command for localhost:PORT3
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Disconnecting new master as slave.
# Execute on localhost:PORT4: RESET SLAVE ALL
# Starting slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# Failover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 11 - test script exit > threshold failover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# Checking privileges on candidates.
# Performing failover.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Candidate slave localhost:PORT4 will become the new master.
# Checking slaves status (before failover).
# Preparing candidate for failover.
# No missing transactions found on 127.0.0.1:PORT2. Skipping connection of candidate as slave.
# No missing transactions found on localhost:PORT3. Skipping connection of candidate as slave.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
# Before script failed!
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 WARN - slave is not configured with this master
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT4 Ok
# Switching slaves to new master.
# Change master command for 127.0.0.1:PORT2
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Change master command for localhost:PORT3
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Disconnecting new master as slave.
# Execute on localhost:PORT4: RESET SLAVE ALL
# Starting slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# Failover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 12 - test script exit < threshold failover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# Checking privileges on candidates.
# Performing failover.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Candidate slave localhost:PORT4 will become the new master.
# Checking slaves status (before failover).
# Preparing candidate for failover.
# No missing transactions found on 127.0.0.1:PORT2. Skipping connection of candidate as slave.
# No missing transactions found on localhost:PORT3. Skipping connection of candidate as slave.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 WARN - slave is not configured with this master
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT4 Ok
# Switching slaves to new master.
# Change master command for 127.0.0.1:PORT2
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Change master command for localhost:PORT3
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Disconnecting new master as slave.
# Execute on localhost:PORT4: RESET SLAVE ALL
# Starting slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
ERROR: XXX Script failed.
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# Failover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 13 - test script exit = threshold failover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# Checking privileges on candidates.
# Performing failover.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Candidate slave localhost:PORT4 will become the new master.
# Checking slaves status (before failover).
# Preparing candidate for failover.
# No missing transactions found on 127.0.0.1:PORT2. Skipping connection of candidate as slave.
# No missing transactions found on localhost:PORT3. Skipping connection of candidate as slave.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 WARN - slave is not configured with this master
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT4 Ok
# Switching slaves to new master.
# Change master command for 127.0.0.1:PORT2
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Change master command for localhost:PORT3
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Disconnecting new master as slave.
# Execute on localhost:PORT4: RESET SLAVE ALL
# Starting slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
# After script failed!
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# Failover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 14 - test script exit > threshold failover
WARNING: You have chosen to use external script return code checking. Depending on which script fails, this can leave the operation in an undefined state. Please check your results carefully if the operation aborts.
# Checking privileges.
# Checking privileges on candidates.
# Performing failover.
# Checking eligibility of slave localhost:PORT4 for candidate.
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Candidate slave localhost:PORT4 will become the new master.
# Checking slaves status (before failover).
# Preparing candidate for failover.
# No missing transactions found on 127.0.0.1:PORT2. Skipping connection of candidate as slave.
# No missing transactions found on localhost:PORT3. Skipping connection of candidate as slave.
# Creating replication user if it does not exist.
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Script completed Ok.
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave 127.0.0.1:PORT2 WARN - slave is not configured with this master
#   Executing stop on slave 127.0.0.1:PORT2 Ok
#   Executing stop on slave localhost:PORT3 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT4 Ok
# Switching slaves to new master.
# Change master command for 127.0.0.1:PORT2
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Change master command for localhost:PORT3
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Disconnecting new master as slave.
# Execute on localhost:PORT4: RESET SLAVE ALL
# Starting slaves.
# Performing START on all slaves.
#   Executing start on slave 127.0.0.1:PORT2 Ok
#   Executing start on slave localhost:PORT3 Ok
# Spawning external script.
# SCRIPT EXECUTED: XXXXXXX
# ARGUMENTS PASSED:
# old master host:  UNKNOWN
# old master port:  UNKNOWN
# new master host:  localhost
# new master port:  PORT4
# Returning code 10
# After script failed!
# Checking slaves for errors.
# 127.0.0.1:PORT2 status: Ok 
# localhost:PORT3 status: Ok 
# Failover complete.
# Attempting to contact localhost ... Success
# Attempting to contact 127.0.0.1 ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
