Test case 1 - failover to localhost:PORT2 with errant transactions.
# Checking privileges.
# Checking privileges on candidates.
# ERROR: Errant transaction(s) found on slave(s).
#  - For slave 'localhost@PORT2': XXXXXXXXX:1
#  - For slave 'localhost@PORT4': XXXXXXXXX:1
ERROR: Errant transaction(s) found on slave(s). Note: If you want to ignore this issue, although not advised, please use the utility with the --force option.
Test case 2 - failover to localhost:PORT2 with errant transactions using --force option.
# Checking privileges.
# Checking privileges on candidates.
# ERROR: Errant transaction(s) found on slave(s).
#  - For slave 'localhost@PORT2': XXXXXXXXX:1
#  - For slave 'localhost@PORT4': XXXXXXXXX:1
# Performing failover.
# Checking eligibility of slave localhost:PORT2 for candidate.
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Candidate slave localhost:PORT2 will become the new master.
# Checking slaves status (before failover).
# Preparing candidate for failover.
# Reading events in relay log for slave localhost:PORT2
# Reading events in relay log for slave localhost:PORT3
# No missing transactions found on localhost:PORT3. Skipping connection of candidate as slave.
# Reading events in relay log for slave localhost:PORT4
# Missing transactions found on localhost:PORT4. SELECT gtid_subset() = 0
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT4.
# Connecting candidate to localhost:PORT4 as a temporary slave to retrieve unprocessed GTIDs.
# Change master command for localhost:PORT2
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT4, MASTER_AUTO_POSITION=1
# Read only is XXX for localhost:PORT4.
# UNLOCK STRING: UNLOCK TABLES
# Waiting for candidate to catch up to slave localhost:PORT4.
# Slave localhost:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(XXXXXXXXX)
# Return Code = XXX
# Slave localhost:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(XXXXXXXXX)
# Return Code = XXX
# Creating replication user if it does not exist.
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave localhost:PORT2 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT2 Ok
#   Executing stop on slave localhost:PORT3 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 WARN - slave is not configured with this master
#   Executing stop on slave localhost:PORT4 Ok
# Switching slaves to new master.
# Change master command for localhost:PORT3
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT2, MASTER_AUTO_POSITION=1
# Change master command for localhost:PORT4
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT2, MASTER_AUTO_POSITION=1
# Disconnecting new master as slave.
# Execute on localhost:PORT2: RESET SLAVE ALL
# Starting slaves.
# Performing START on all slaves.
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT4 Ok
# Checking slaves for errors.
# localhost:PORT3 status: Ok 
# localhost:PORT4 status: Ok 
# Failover complete.
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
Test case 3 - switchover to localhost:PORT2 with errant transactions.
# Checking privileges.
# ERROR: Errant transaction(s) found on slave(s).
#  - For slave 'localhost@PORT2': XXXXXXXXX:1
#  - For slave 'localhost@PORT4': XXXXXXXXX:1
ERROR: Errant transaction(s) found on slave(s). Note: If you want to ignore this issue, although not advised, please use the utility with the --force option.
Test case 4 - switchover to localhost:PORT2 with errant transactions using --force option.
# Checking privileges.
# ERROR: Errant transaction(s) found on slave(s).
#  - For slave 'localhost@PORT2': XXXXXXXXX:1
#  - For slave 'localhost@PORT4': XXXXXXXXX:1
# Performing switchover from master at localhost:PORT1 to slave at localhost:PORT2.
# Checking candidate slave prerequisites.
# GTID_MODE=ON is set for all servers.
# Checking eligibility of slave localhost:PORT2 for candidate.
#   Slave connected to master ... Ok
#   GTID_MODE=ON ... Ok
#   Replication user exists ... Ok
# Checking slaves configuration to master.
# Creating replication user if it does not exist.
# Blocking writes on master.
# LOCK STRING: FLUSH TABLES WITH READ LOCK
# Read only is ON for localhost:PORT1.
# Waiting for slaves to catch up to old master.
# Slave localhost:PORT2:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(XXXXXXXXX)
# Return Code = XXX
# Slave localhost:PORT3:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(XXXXXXXXX)
# Return Code = XXX
# Slave localhost:PORT4:
# QUERY = SELECT WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(XXXXXXXXX)
# Return Code = XXX
# Stopping slaves.
# Performing STOP on all slaves.
#   Executing stop on slave localhost:PORT2 Ok
#   Executing stop on slave localhost:PORT3 Ok
#   Executing stop on slave localhost:PORT4 Ok
# Read only is XXX for localhost:PORT1.
# UNLOCK STRING: UNLOCK TABLES
# Switching slaves to new master.
# Executing CHANGE MASTER on localhost:PORT3.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT2, MASTER_AUTO_POSITION=1
# Executing CHANGE MASTER on localhost:PORT4.
# CHANGE MASTER TO MASTER_HOST = 'localhost', MASTER_USER = 'rpl', MASTER_PASSWORD = 'rpl', MASTER_PORT = PORT2, MASTER_AUTO_POSITION=1
# Starting all slaves.
# Performing START on all slaves.
#   Executing start on slave localhost:PORT3 Ok
#   Executing start on slave localhost:PORT4 Ok
# Checking slaves for errors.
# localhost:PORT3 status: Ok 
# localhost:PORT4 status: Ok 
# Switchover complete.
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
# Attempting to contact localhost ... Success
#
# Replication Topology Health:
# ...done.
