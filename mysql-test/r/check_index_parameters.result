Test case 1 - do the help
MySQL Utilities mysqlindexcheck version X.Y.Z
License type: GPLv2
Usage: mysqlindexcheck --server=user:pass@host:port:socket db1.table1 db2 db3.table2

mysqlindexcheck - check for duplicate or redundant indexes

Options:
  --version             show program's version number and exit
  --help                display a help message and exit
  --license             display program's license and exit
  --server=SERVER       connection information for the server in the form:
                        <user>[:<password>]@<host>[:<port>][:<socket>] or
                        <login-path>[:<port>][:<socket>] or <config-
                        path>[<[group]>].
  --ssl-ca=SSL_CA       path to a file that contains a list of trusted SSL
                        CAs.
  --ssl-cert=SSL_CERT   name of the SSL certificate file to use for
                        establishing a secure connection.
  --ssl-key=SSL_KEY     name of the SSL key file to use for establishing a
                        secure connection.
  --ssl=SSL             specifies if the server connection requires use of
                        SSL. If an encrypted connection cannot be established,
                        the connection attempt fails. By default 0 (SSL not
                        required).
  -d, --show-drops      display DROP statements for dropping indexes
  -i, --show-indexes    display indexes for each table
  -s, --skip            skip tables that do not exist
  -f FORMAT, --format=FORMAT
                        display the list of indexes per table in either sql,
                        grid (default), tab, csv, or vertical format
  --stats               show index performance statistics
  --best=BEST           limit index statistics to the best N indexes
  --worst=WORST         limit index statistics to the worst N indexes
  -r, --report-indexes  reports if a table has neither UNIQUE indexes nor a
                        PRIMARY key
  -v, --verbose         control how much information is displayed. e.g., -v =
                        verbose, -vv = more verbose, -vvv = debug
Test case 2 - show drops for a table with dupe (-vv) indexes
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_a.t1
# The following indexes are duplicates or redundant for table util_test_a.t1:
#
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#
# DROP statements:
#
ALTER TABLE `util_test_a`.`t1` DROP INDEX `s4`;
ALTER TABLE `util_test_a`.`t1` DROP INDEX `s2`;
#
#
# ...done.
Test case 3 - show drops for a table with dupe indexes
# Source on XXXX-XXXX: ... connected.
# The following indexes are duplicates or redundant for table util_test_a.t1:
#
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#
# DROP statements:
#
ALTER TABLE `util_test_a`.`t1` DROP INDEX `s4`;
ALTER TABLE `util_test_a`.`t1` DROP INDEX `s2`;
#
Test case 4 - show drops for a table without dupe (-vv) indexes
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_c.t6
# Table util_test_c.t6 is not indexed.
#
# ...done.
Test case 5 - same as test case 2 but quiet
# Source on XXXX-XXXX: ... connected.
# The following indexes are duplicates or redundant for table util_test_a.t1:
#
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#
# DROP statements:
#
ALTER TABLE `util_test_a`.`t1` DROP INDEX `s4`;
ALTER TABLE `util_test_a`.`t1` DROP INDEX `s2`;
#
Test case 6 - same as test case 4 but quiet
# Source on XXXX-XXXX: ... connected.
Test case 7 - show indexes
# Source on XXXX-XXXX: ... connected.
# Showing indexes from util_test_a.t1:
#
+--------------+--------+----------+----------+----------+
| database     | table  | name     | type     | columns  |
+--------------+--------+----------+----------+----------+
| util_test_a  | t1     | PRIMARY  | BTREE    | A        |
| util_test_a  | t1     | s1       | SPATIAL  | e(32)    |
| util_test_a  | t1     | s2       | SPATIAL  | d(32)    |
| util_test_a  | t1     | s4       | SPATIAL  | d(32)    |
+--------------+--------+----------+----------+----------+
#
# The following indexes are duplicates or redundant for table util_test_a.t1:
#
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
Test case 8 - show indexes with -i
# Source on XXXX-XXXX: ... connected.
# Showing indexes from util_test_a.t1:
#
+--------------+--------+----------+----------+----------+
| database     | table  | name     | type     | columns  |
+--------------+--------+----------+----------+----------+
| util_test_a  | t1     | PRIMARY  | BTREE    | A        |
| util_test_a  | t1     | s1       | SPATIAL  | e(32)    |
| util_test_a  | t1     | s2       | SPATIAL  | d(32)    |
| util_test_a  | t1     | s4       | SPATIAL  | d(32)    |
+--------------+--------+----------+----------+----------+
#
# The following indexes are duplicates or redundant for table util_test_a.t1:
#
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
Test case 9 - find redundancy with the clustered index (InnoDB)
# Source on XXXX-XXXX: ... connected.
# Showing indexes from util_test_d.cluster_idx:
#
+--------------+--------------+------------+--------+-----------+
| database     | table        | name       | type   | columns   |
+--------------+--------------+------------+--------+-----------+
| util_test_d  | cluster_idx  | PRIMARY    | BTREE  | id        |
| util_test_d  | cluster_idx  | col2       | BTREE  | col2      |
| util_test_d  | cluster_idx  | redundant  | BTREE  | col2, id  |
+--------------+--------------+------------+--------+-----------+
#
# The following index is a duplicate or redundant for table util_test_d.cluster_idx:
#
CREATE INDEX `col2` ON `util_test_d`.`cluster_idx` (`col2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `redundant` ON `util_test_d`.`cluster_idx` (`col2`, `id`) USING BTREE
#
# DROP statement:
#
ALTER TABLE `util_test_d`.`cluster_idx` DROP INDEX `col2`;
#
# The following index for table util_test_d.cluster_idx contains the clustered index and might be redundant:
#
CREATE INDEX `redundant` ON `util_test_d`.`cluster_idx` (`col2`, `id`) USING BTREE
#
# DROP/ADD statement:
#
ALTER TABLE `util_test_d`.`cluster_idx` DROP INDEX `redundant`, ADD INDEX `redundant` (col2);
#
# WARNING: Not enough data to calculate best/worst indexes.
Test case 10 - not find redundancy with the clustered index (not InnoDB)
# Source on XXXX-XXXX: ... connected.
# Showing indexes from util_test_d.no_cluster_idx:
#
+--------------+-----------------+------------+--------+-----------+
| database     | table           | name       | type   | columns   |
+--------------+-----------------+------------+--------+-----------+
| util_test_d  | no_cluster_idx  | PRIMARY    | BTREE  | id        |
| util_test_d  | no_cluster_idx  | col2       | BTREE  | col2      |
| util_test_d  | no_cluster_idx  | redundant  | BTREE  | col2, id  |
+--------------+-----------------+------------+--------+-----------+
#
# The following index is a duplicate or redundant for table util_test_d.no_cluster_idx:
#
CREATE INDEX `col2` ON `util_test_d`.`no_cluster_idx` (`col2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `redundant` ON `util_test_d`.`no_cluster_idx` (`col2`, `id`) USING BTREE
#
# DROP statement:
#
ALTER TABLE `util_test_d`.`no_cluster_idx` DROP INDEX `col2`;
#
# WARNING: Not enough data to calculate best/worst indexes.
Test case 11 - find various redundancies (and duplicates) with the clustered index (InnoDB)
# Source on XXXX-XXXX: ... connected.
# Showing indexes from util_test_d.various_cluster_idx:
#
+--------------+----------------------+--------------------+--------+-----------+
| database     | table                | name               | type   | columns   |
+--------------+----------------------+--------------------+--------+-----------+
| util_test_d  | various_cluster_idx  | PRIMARY            | BTREE  | id        |
| util_test_d  | various_cluster_idx  | col2               | BTREE  | col2      |
| util_test_d  | various_cluster_idx  | col2_2             | BTREE  | col2      |
| util_test_d  | various_cluster_idx  | redundant          | BTREE  | col2, id  |
| util_test_d  | various_cluster_idx  | another_redundant  | BTREE  | col3, id  |
+--------------+----------------------+--------------------+--------+-----------+
#
# The following indexes are duplicates or redundant for table util_test_d.various_cluster_idx:
#
CREATE INDEX `col2_2` ON `util_test_d`.`various_cluster_idx` (`col2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `col2` ON `util_test_d`.`various_cluster_idx` (`col2`) USING BTREE
#
CREATE INDEX `col2` ON `util_test_d`.`various_cluster_idx` (`col2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `redundant` ON `util_test_d`.`various_cluster_idx` (`col2`, `id`) USING BTREE
#
# DROP statements:
#
ALTER TABLE `util_test_d`.`various_cluster_idx` DROP INDEX `col2_2`;
ALTER TABLE `util_test_d`.`various_cluster_idx` DROP INDEX `col2`;
#
# The following indexes for table util_test_d.various_cluster_idx contain the clustered index and might be redundant:
#
CREATE INDEX `redundant` ON `util_test_d`.`various_cluster_idx` (`col2`, `id`) USING BTREE
#
CREATE INDEX `another_redundant` ON `util_test_d`.`various_cluster_idx` (`col3`, `id`) USING BTREE
#
# DROP/ADD statements:
#
ALTER TABLE `util_test_d`.`various_cluster_idx` DROP INDEX `redundant`, ADD INDEX `redundant` (col2);
ALTER TABLE `util_test_d`.`various_cluster_idx` DROP INDEX `another_redundant`, ADD INDEX `another_redundant` (col3);
#
# WARNING: Not enough data to calculate best/worst indexes.
Test case 12 - report tables without PRIMARY or UNIQUE key.
# Source on XXXX-XXXX: ... connected.
# Table `util_test_e`.`t1` is not indexed.
# Table `util_test_e`.`t2` does not contain neither a PRIMARY nor UNIQUE key.
# The following index for table util_test_e.t2 contains the clustered index and might be redundant:
#
CREATE INDEX `b` ON `util_test_e`.`t2` (`b`) USING BTREE
# Table `util_test_e`.`t3` does not contain a PRIMARY key.
# The following index for table util_test_e.t3 contains the clustered index and might be redundant:
#
CREATE UNIQUE INDEX `b` ON `util_test_e`.`t3` (`b`) USING BTREE
# Table `util_test_e`.`t5` does not contain a PRIMARY key.
# The following index for table util_test_e.t5 contains the clustered index and might be redundant:
#
CREATE UNIQUE INDEX `a` ON `util_test_e`.`t5` (`a`) USING BTREE
Test case 13 - show indexes with -vv
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_e.t1
# Table `util_test_e`.`t1` is not indexed.
#
# Getting indexes for util_test_e.t2
# Showing indexes from util_test_e.t2:
#
+--------------+--------+-------+--------+---------+----------------+----------+
| database     | table  | name  | type   | unique  | accepts nulls  | columns  |
+--------------+--------+-------+--------+---------+----------------+----------+
| util_test_e  | t2     | b     | BTREE  | False   | True           | b        |
+--------------+--------+-------+--------+---------+----------------+----------+
#
# Table `util_test_e`.`t2` does not contain neither a PRIMARY nor UNIQUE key.
# The following index for table util_test_e.t2 contains the clustered index and might be redundant:
#
CREATE INDEX `b` ON `util_test_e`.`t2` (`b`) USING BTREE
#
# Getting indexes for util_test_e.t3
# Showing indexes from util_test_e.t3:
#
+--------------+--------+-------+--------+---------+----------------+----------+
| database     | table  | name  | type   | unique  | accepts nulls  | columns  |
+--------------+--------+-------+--------+---------+----------------+----------+
| util_test_e  | t3     | b     | BTREE  | True    | True           | b        |
+--------------+--------+-------+--------+---------+----------------+----------+
#
# Table `util_test_e`.`t3` does not contain a PRIMARY key.
# The following index for table util_test_e.t3 contains the clustered index and might be redundant:
#
CREATE UNIQUE INDEX `b` ON `util_test_e`.`t3` (`b`) USING BTREE
#
# Getting indexes for util_test_e.t4
# Showing indexes from util_test_e.t4:
#
+--------------+--------+----------+--------+---------+----------------+----------+
| database     | table  | name     | type   | unique  | accepts nulls  | columns  |
+--------------+--------+----------+--------+---------+----------------+----------+
| util_test_e  | t4     | PRIMARY  | BTREE  | True    | False          | b        |
+--------------+--------+----------+--------+---------+----------------+----------+
#
# Table util_test_e.t4 has no duplicate nor redundant indexes.
#
# Getting indexes for util_test_e.t5
# Showing indexes from util_test_e.t5:
#
+--------------+--------+-------+--------+---------+----------------+----------+
| database     | table  | name  | type   | unique  | accepts nulls  | columns  |
+--------------+--------+-------+--------+---------+----------------+----------+
| util_test_e  | t5     | a     | BTREE  | True    | False          | a        |
+--------------+--------+-------+--------+---------+----------------+----------+
#
# Table `util_test_e`.`t5` does not contain a PRIMARY key.
# The following index for table util_test_e.t5 contains the clustered index and might be redundant:
#
CREATE UNIQUE INDEX `a` ON `util_test_e`.`t5` (`a`) USING BTREE
#
# ...done.
