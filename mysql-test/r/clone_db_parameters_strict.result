Test case 1 - normal run
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Destination on XXXX-XXXX: ... connected.
# Copying database util_test renamed as util_db_clone
# Copying TABLE util_test.t1
# Copying TABLE util_test.t2
# Copying TABLE util_test.t3
# Copying TABLE util_test.t4
# Copying TABLE util_test.t5
# Copying FUNCTION util_test.f1
# Copying FUNCTION util_test.f2
# Copying PROCEDURE util_test.p1
# Copying VIEW util_test.v2
# Copying VIEW util_test.v1
# Copying GRANTS from util_test
# Copying data for TABLE util_test.t1
# Copying data for TABLE util_test.t2
# Copying data for TABLE util_test.t3
# Copying data for TABLE util_test.t4
# Copying data for TABLE util_test.t5
# Copying TRIGGER util_test.trg
# Copying EVENT util_test.e1
#...done.
Test case 2 - operation fails - need force
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Destination on XXXX-XXXX: ... connected.
# Copying database util_test renamed as util_db_clone
ERROR: destination database exists. Use --drop-first to overwrite existing database.
Test case 3 - help
MySQL Utilities mysqldbcopy version X.Y.Z
License type: GPLv2
Usage: mysqldbcopy --source=user:pass@host:port:socket --destination=user:pass@host:port:socket orig_db:new_db

mysqldbcopy - copy databases from one server to another

Options:
  --version             show program's version number and exit
  --help                display a help message and exit
  --license             display program's license and exit
  --source=SOURCE       connection information for source server in the form:
                        <user>[:<password>]@<host>[:<port>][:<socket>] or
                        <login-path>[:<port>][:<socket>] or <config-
                        path>[<[group]>].
  --destination=DESTINATION
                        connection information for destination server in the
                        form: <user>[:<password>]@<host>[:<port>][:<socket>]
                        or <login-path>[:<port>][:<socket>] or <config-
                        path>[<[group]>].
  --character-set=CHARSET
                        sets the client character set. The default is
                        retrieved from the server variable
                        'character_set_client'.
  -d, --drop-first      drop the new database or object if it exists
  -x EXCLUDE, --exclude=EXCLUDE
                        exclude one or more objects from the operation using
                        either a specific name (e.g. db1.t1), a LIKE pattern
                        (e.g. db1.t% or db%.%) or a REGEXP search pattern. To
                        use a REGEXP search pattern for all exclusions, you
                        must also specify the --regexp option. Repeat the
                        --exclude option for multiple exclusions.
  -a, --all             include all databases
  --skip=SKIP_OBJECTS   specify objects to skip in the operation in the form
                        of a comma-separated list (no spaces). Valid values =
                        tables, views, triggers, procedures, functions,
                        events, grants, data, create_db
  -v, --verbose         control how much information is displayed. e.g., -v =
                        verbose, -vv = more verbose, -vvv = debug
  -q, --quiet           turn off all messages for quiet execution.
  --new-storage-engine=NEW_ENGINE
                        change all tables to use this storage engine if
                        storage engine exists on the destination.
  --default-storage-engine=DEF_ENGINE
                        change all tables to use this storage engine if the
                        original storage engine does not exist on the
                        destination.
  --locking=LOCKING     choose the lock type for the operation: no-locks = do
                        not use any table locks, lock-all = use table locks
                        but no transaction and no consistent read, snaphot
                        (default): consistent read using a single transaction.
  -G, --basic-regexp, --regexp
                        use 'REGEXP' operator to match pattern. Default is to
                        use 'LIKE'.
  --rpl-user=RPL_USER   the user and password for the replication user
                        requirement, in the form: <user>[:<password>] or
                        <login-path>. E.g. rpl:passwd
  --rpl=RPL_MODE, --replication=RPL_MODE
                        include replication information. Choices: 'master' =
                        include the CHANGE MASTER command using the source
                        server as the master, 'slave' = include the CHANGE
                        MASTER command for the source server's master (only
                        works if the source server is a slave).
  --ssl-ca=SSL_CA       path to a file that contains a list of trusted SSL
                        CAs.
  --ssl-cert=SSL_CERT   name of the SSL certificate file to use for
                        establishing a secure connection.
  --ssl-key=SSL_KEY     name of the SSL key file to use for establishing a
                        secure connection.
  --ssl=SSL             specifies if the server connection requires use of
                        SSL. If an encrypted connection cannot be established,
                        the connection attempt fails. By default 0 (SSL not
                        required).
  --skip-gtid           skip creation and execution of GTID statements during
                        copy.
  --multiprocess=MULTIPROCESS
                        use multiprocessing, number of processes to use for
                        concurrent execution. Special values: 0 (number of
                        processes equal to the CPUs detected) and 1 (default -
                        no concurrency).
  --not-null-blobs      Allow conversion of blob fields marked as NOT NULL to
                        NULL before copy then restore NOT NULL after the copy.
                        May cause indexes to be rebuilt if the affected blob
                        fields are used in indexes.
Test case 4 - no data
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Destination on XXXX-XXXX: ... connected.
# Copying database util_test renamed as util_db_clone
# Copying TABLE util_test.t1
# Copying TABLE util_test.t2
# Copying TABLE util_test.t3
# Copying TABLE util_test.t4
# Copying TABLE util_test.t5
# Copying FUNCTION util_test.f1
# Copying FUNCTION util_test.f2
# Copying PROCEDURE util_test.p1
# Copying VIEW util_test.v2
# Copying VIEW util_test.v1
# Copying GRANTS from util_test
# Copying TRIGGER util_test.trg
# Copying EVENT util_test.e1
#...done.
OBJECT COUNTS: tables = 5, views = 2, triggers = 1, procedures = 1, functions = 2, events = 1 
Test case 5 - quiet clone
WARNING: Using a password on the command line interface can be insecure.
Test case 6 - verbose clone with drop warnings.
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Destination on XXXX-XXXX: ... connected.
# Copying database util_test renamed as util_db_clone
# Dropping new object TABLE util_db_clone.`t1`
# WARNING: Unable to drop `t1` from source database (object may not exist): DROP TABLE `util_db_clone`.`t1`
# Copying TABLE util_test.t1
CREATE TABLE `util_db_clone`.`t1` LIKE `util_test`.`t1`
# Dropping new object TABLE util_db_clone.`t2`
# WARNING: Unable to drop `t2` from source database (object may not exist): DROP TABLE `util_db_clone`.`t2`
# Copying TABLE util_test.t2
CREATE TABLE `util_db_clone`.`t2` LIKE `util_test`.`t2`
# Dropping new object TABLE util_db_clone.`t3`
# WARNING: Unable to drop `t3` from source database (object may not exist): DROP TABLE `util_db_clone`.`t3`
# Copying TABLE util_test.t3
CREATE TABLE `util_db_clone`.`t3` LIKE `util_test`.`t3`
# Dropping new object TABLE util_db_clone.`t4`
# WARNING: Unable to drop `t4` from source database (object may not exist): DROP TABLE `util_db_clone`.`t4`
# Copying TABLE util_test.t4
CREATE TABLE `util_db_clone`.`t4` LIKE `util_test`.`t4`

ALTER TABLE util_db_clone.t4 add CONSTRAINT `ref_t3`
FOREIGN KEY (`c`)
REFERENCES `util_db_clone`.`t3`
(`a`)
ON UPDATE RESTRICT
ON DELETE RESTRICT

# Dropping new object TABLE util_db_clone.`t5`
# WARNING: Unable to drop `t5` from source database (object may not exist): DROP TABLE `util_db_clone`.`t5`
# Copying TABLE util_test.t5
CREATE TABLE `util_db_clone`.`t5` LIKE `util_test`.`t5`
# Dropping new object FUNCTION util_db_clone.`f1`
# WARNING: Unable to drop `f1` from source database (object may not exist): DROP FUNCTION `util_db_clone`.`f1`
# Copying FUNCTION util_test.f1
CREATE DEFINER=`root`@`localhost` FUNCTION `f1`() RETURNS int(11)
    DETERMINISTIC
RETURN (SELECT 1)
# Dropping new object FUNCTION util_db_clone.`f2`
# WARNING: Unable to drop `f2` from source database (object may not exist): DROP FUNCTION `util_db_clone`.`f2`
# Copying FUNCTION util_test.f2
CREATE DEFINER=`root`@`localhost` FUNCTION `f2`(base_price DECIMAL(20,2) UNSIGNED, tax_percentage DECIMAL(3,0) UNSIGNED) RETURNS decimal(21,2) unsigned
    DETERMINISTIC
RETURN base_price + base_price*(tax_percentage/100)
# Dropping new object PROCEDURE util_db_clone.`p1`
# WARNING: Unable to drop `p1` from source database (object may not exist): DROP PROCEDURE `util_db_clone`.`p1`
# Copying PROCEDURE util_test.p1
CREATE DEFINER=`root`@`localhost` PROCEDURE `p1`(p1 CHAR(20))
INSERT INTO util_db_clone.t1 VALUES ("50")
# Dropping new object VIEW util_db_clone.`v2`
# WARNING: Unable to drop `v2` from source database (object may not exist): DROP VIEW `util_db_clone`.`v2`
# Copying VIEW util_test.v2
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v2` AS select `t5`.`name` AS `name`,`util_db_clone`.`f2`(`t5`.`base_price`,`t5`.`tax_percentage`) AS `price` from `t5`
# Dropping new object VIEW util_db_clone.`v1`
# WARNING: Unable to drop `v1` from source database (object may not exist): DROP VIEW `util_db_clone`.`v1`
# Copying VIEW util_test.v1
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v1` AS select `t1`.`a` AS `a` from `t1`
# Copying GRANTS from util_test
GRANT ALTER ON `util_db_clone`.* TO 'joe'@'user'
GRANT ALTER ROUTINE ON `util_db_clone`.* TO 'joe'@'user'
GRANT CREATE ON `util_db_clone`.* TO 'joe'@'user'
GRANT CREATE ROUTINE ON `util_db_clone`.* TO 'joe'@'user'
GRANT CREATE TEMPORARY TABLES ON `util_db_clone`.* TO 'joe'@'user'
GRANT CREATE VIEW ON `util_db_clone`.* TO 'joe'@'user'
GRANT DELETE ON `util_db_clone`.* TO 'joe'@'user'
GRANT DROP ON `util_db_clone`.* TO 'joe'@'user'
GRANT EVENT ON `util_db_clone`.* TO 'joe'@'user'
GRANT EXECUTE ON `util_db_clone`.* TO 'joe'@'user'
GRANT INDEX ON `util_db_clone`.* TO 'joe'@'user'
GRANT INSERT ON `util_db_clone`.* TO 'joe'@'user'
GRANT LOCK TABLES ON `util_db_clone`.* TO 'joe'@'user'
GRANT REFERENCES ON `util_db_clone`.* TO 'joe'@'user'
GRANT SELECT ON `util_db_clone`.* TO 'joe'@'user'
GRANT SHOW VIEW ON `util_db_clone`.* TO 'joe'@'user'
GRANT TRIGGER ON `util_db_clone`.* TO 'joe'@'user'
GRANT UPDATE ON `util_db_clone`.* TO 'joe'@'user'
GRANT ALTER ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT ALTER ROUTINE ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT CREATE ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT CREATE ROUTINE ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT CREATE TEMPORARY TABLES ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT CREATE VIEW ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT DELETE ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT DROP ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT EVENT ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT EXECUTE ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT INDEX ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT INSERT ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT LOCK TABLES ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT REFERENCES ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT SELECT ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT SHOW VIEW ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT TRIGGER ON `util_db_clone`.* TO 'joe_wildcard'@'%'
GRANT UPDATE ON `util_db_clone`.* TO 'joe_wildcard'@'%'

ALTER TABLE util_db_clone.t4 add CONSTRAINT `ref_t3`
FOREIGN KEY (`c`)
REFERENCES `util_db_clone`.`t3`
(`a`)
ON UPDATE RESTRICT
ON DELETE RESTRICT

# Copying data for TABLE util_test.t1
INSERT INTO `util_db_clone`.`t1` SELECT * FROM `util_test`.`t1`
# Copying data for TABLE util_test.t2
INSERT INTO `util_db_clone`.`t2` SELECT * FROM `util_test`.`t2`
# Copying data for TABLE util_test.t3
INSERT INTO `util_db_clone`.`t3` SELECT * FROM `util_test`.`t3`
# Copying data for TABLE util_test.t4
INSERT INTO `util_db_clone`.`t4` SELECT * FROM `util_test`.`t4`
# Copying data for TABLE util_test.t5
INSERT INTO `util_db_clone`.`t5` SELECT * FROM `util_test`.`t5`
# Dropping new object TRIGGER util_db_clone.`trg`
# WARNING: Unable to drop `trg` from source database (object may not exist): DROP TRIGGER `util_db_clone`.`trg`
# Copying TRIGGER util_test.trg
CREATE DEFINER=`root`@`localhost` TRIGGER util_db_clone.trg AFTER INSERT ON util_db_clone.t1 FOR EACH ROW INSERT INTO util_db_clone.t2 VALUES('Test objects count')
# Dropping new object EVENT util_db_clone.`e1`
# WARNING: Unable to drop `e1` from source database (object may not exist): DROP EVENT `util_db_clone`.`e1`
# Copying EVENT util_test.e1
CREATE DEFINER=`user`@`host` EVENT `e1` ON SCHEDULE EVERY 1 YEAR STARTS 'YYYY-MM-DD HH:MI:SS' ON COMPLETION NOT PRESERVE DISABLE DO DELETE FROM util_db_clone.t1 WHERE a = "not there"
#...done.
