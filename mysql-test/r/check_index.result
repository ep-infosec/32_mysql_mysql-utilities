Test case 1 - check a table without indexes
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_c.t6
# Table util_test_c.t6 is not indexed.
#
# ...done.
Test case 2 - check a list of tables and databases
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_a.t1
# The following indexes are duplicates or redundant for table util_test_a.t1:
#
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#
# Getting indexes for util_test_c.t5
# Table `util_test_c`.`t5` does not contain neither a PRIMARY nor UNIQUE key.
# The following indexes are duplicates or redundant for table util_test_c.t5:
#
CREATE FULLTEXT INDEX `ft1` ON `util_test_c`.`t5` (`y`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft` ON `util_test_c`.`t5` (`y`) 
#
CREATE FULLTEXT INDEX `ft3` ON `util_test_c`.`t5` (`a`, `b`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft2` ON `util_test_c`.`t5` (`a`, `b`, `c`) 
#
CREATE FULLTEXT INDEX `ft6` ON `util_test_c`.`t5` (`c`, `a`, `b`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft2` ON `util_test_c`.`t5` (`a`, `b`, `c`) 
#
CREATE FULLTEXT INDEX `ft` ON `util_test_c`.`t5` (`y`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft4` ON `util_test_c`.`t5` (`a`, `b`, `y`) 
#
CREATE FULLTEXT INDEX `ft5` ON `util_test_c`.`t5` (`y`, `a`, `b`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft4` ON `util_test_c`.`t5` (`a`, `b`, `y`) 
#
# Getting indexes for util_test_c.t6
# Table `util_test_c`.`t6` is not indexed.
#
# Getting indexes for util_test_b.t3
# Table `util_test_b`.`t3` does not contain neither a PRIMARY nor UNIQUE key.
# Table util_test_b.t3 has no duplicate nor redundant indexes.
#
# Getting indexes for util_test_b.t4
# Table `util_test_b`.`t4` does not contain neither a PRIMARY nor UNIQUE key.
# Table util_test_b.t4 has no duplicate nor redundant indexes.
#
# ...done.
Test case 3 - check all tables for a single database
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_a.t1
# The following indexes are duplicates or redundant for table util_test_a.t1:
#
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#
CREATE INDEX `s2` ON `util_test_a`.`t1` (`d`(32)) 
#     may be redundant or duplicate of:
CREATE INDEX `s4` ON `util_test_a`.`t1` (`d`(32)) 
#
# Getting indexes for util_test_a.t2
# Table `util_test_a`.`t2` does not contain neither a PRIMARY nor UNIQUE key.
# Table util_test_a.t2 has no duplicate nor redundant indexes.
#
# ...done.
Test case 4 - check tables for a non-existant database
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Warning: database util_test_X does not exist. Skipping.
ERROR: No tables to check.
Test case 5 - check indexes for a non-existant table
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
ERROR: Table nosuch.nosuch does not exist. Use --skip to skip missing tables.
Test case 6 - check indexes for a non-existant table with skip option
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
#
# ...done.
Test case 7 - check clustered indexes redundancies
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_d.cluster_idx
# The following index is a duplicate or redundant for table util_test_d.cluster_idx:
#
CREATE INDEX `col2` ON `util_test_d`.`cluster_idx` (`col2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `redundant` ON `util_test_d`.`cluster_idx` (`col2`, `id`) USING BTREE
# The following index for table util_test_d.cluster_idx contains the clustered index and might be redundant:
#
CREATE INDEX `redundant` ON `util_test_d`.`cluster_idx` (`col2`, `id`) USING BTREE
#
# Getting indexes for util_test_d.no_cluster_idx
# The following index is a duplicate or redundant for table util_test_d.no_cluster_idx:
#
CREATE INDEX `col2` ON `util_test_d`.`no_cluster_idx` (`col2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `redundant` ON `util_test_d`.`no_cluster_idx` (`col2`, `id`) USING BTREE
#
# Getting indexes for util_test_d.various_cluster_idx
# The following indexes are duplicates or redundant for table util_test_d.various_cluster_idx:
#
CREATE INDEX `col2_2` ON `util_test_d`.`various_cluster_idx` (`col2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `col2` ON `util_test_d`.`various_cluster_idx` (`col2`) USING BTREE
#
CREATE INDEX `col2` ON `util_test_d`.`various_cluster_idx` (`col2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `redundant` ON `util_test_d`.`various_cluster_idx` (`col2`, `id`) USING BTREE
# The following indexes for table util_test_d.various_cluster_idx contain the clustered index and might be redundant:
#
CREATE INDEX `redundant` ON `util_test_d`.`various_cluster_idx` (`col2`, `id`) USING BTREE
#
CREATE INDEX `another_redundant` ON `util_test_d`.`various_cluster_idx` (`col3`, `id`) USING BTREE
#
# ...done.
Test case 8 - check PRIMARY key against unique index with more columns, show drops
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_f.qted_`2_quoted_`2
# Table `util_test_f`.`qted_``2_quoted_``2` does not contain a PRIMARY key.
# The following indexes are duplicates or redundant for table util_test_f.qted_`2_quoted_`2:
#
CREATE INDEX `ix_no``nulls_``2` ON `util_test_f`.`qted_``2_quoted_``2` (`c``2`, `c6`) USING BTREE
#     may be redundant or duplicate of:
CREATE UNIQUE INDEX `uk_no``nonulls` ON `util_test_f`.`qted_``2_quoted_``2` (`c``2`, `c6`) USING BTREE
#
CREATE UNIQUE INDEX `ix``_c` ON `util_test_f`.`qted_``2_quoted_``2` (`c``1`, `c6`) USING BTREE
#     may be redundant or duplicate of:
CREATE UNIQUE INDEX `ix_c2` ON `util_test_f`.`qted_``2_quoted_``2` (`c``1`, `c6`, `c``2`) USING BTREE
#
CREATE UNIQUE INDEX `uk_no``nonulls` ON `util_test_f`.`qted_``2_quoted_``2` (`c``2`, `c6`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `ix_no``nulls` ON `util_test_f`.`qted_``2_quoted_``2` (`c``2`, `c6`, `c4`) USING BTREE
#
CREATE INDEX `ix_2` ON `util_test_f`.`qted_``2_quoted_``2` (`c``1`, `c5`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `ix_1` ON `util_test_f`.`qted_``2_quoted_``2` (`c``1`, `c5`) USING BTREE
#
# DROP statements:
#
ALTER TABLE `util_test_f`.`qted_``2_quoted_``2` DROP INDEX `ix_no``nulls_``2`;
ALTER TABLE `util_test_f`.`qted_``2_quoted_``2` DROP INDEX `ix``_c`;
ALTER TABLE `util_test_f`.`qted_``2_quoted_``2` DROP INDEX `uk_no``nonulls`;
ALTER TABLE `util_test_f`.`qted_``2_quoted_``2` DROP INDEX `ix_2`;
#
# The following indexes for table util_test_f.qted_`2_quoted_`2 contain the clustered index and might be redundant:
#
CREATE UNIQUE INDEX `uk_no``nonulls` ON `util_test_f`.`qted_``2_quoted_``2` (`c``2`, `c6`) USING BTREE
#
CREATE UNIQUE INDEX `ix_c2` ON `util_test_f`.`qted_``2_quoted_``2` (`c``1`, `c6`, `c``2`) USING BTREE
#
CREATE INDEX `ix_no``nulls` ON `util_test_f`.`qted_``2_quoted_``2` (`c``2`, `c6`, `c4`) USING BTREE
#
CREATE INDEX `ix_no``nulls_``2` ON `util_test_f`.`qted_``2_quoted_``2` (`c``2`, `c6`) USING BTREE
#
# DROP/ADD statements:
#
ALTER TABLE `util_test_f`.`qted_``2_quoted_``2` DROP INDEX `uk_no``nonulls`;
ALTER TABLE `util_test_f`.`qted_``2_quoted_``2` DROP INDEX `ix_c2`, ADD INDEX `ix_c2` (c`1);
ALTER TABLE `util_test_f`.`qted_``2_quoted_``2` DROP INDEX `ix_no``nulls`, ADD INDEX `ix_no``nulls` (c4);
ALTER TABLE `util_test_f`.`qted_``2_quoted_``2` DROP INDEX `ix_no``nulls_``2`;
#
#
# Getting indexes for util_test_f.t1
# The following index is a duplicate or redundant for table util_test_f.t1:
#
CREATE UNIQUE INDEX `id` ON `util_test_f`.`t1` (`id`, `a1`) USING BTREE
#     may be redundant or duplicate of:
ALTER TABLE `util_test_f`.`t1` ADD PRIMARY KEY (`id`)
#
# DROP statement:
#
ALTER TABLE `util_test_f`.`t1` DROP INDEX `id`;
#
#
# Getting indexes for util_test_f.t2
# The following indexes are duplicates or redundant for table util_test_f.t2:
#
CREATE UNIQUE INDEX `id` ON `util_test_f`.`t2` (`id`, `a1`) USING BTREE
#     may be redundant or duplicate of:
ALTER TABLE `util_test_f`.`t2` ADD PRIMARY KEY (`id`, `a1`)
#
CREATE UNIQUE INDEX `a1` ON `util_test_f`.`t2` (`id`) USING BTREE
#     may be redundant or duplicate of:
ALTER TABLE `util_test_f`.`t2` ADD PRIMARY KEY (`id`, `a1`)
#
CREATE UNIQUE INDEX `id3` ON `util_test_f`.`t2` (`id`, `a1`, `a2`) USING BTREE
#     may be redundant or duplicate of:
ALTER TABLE `util_test_f`.`t2` ADD PRIMARY KEY (`id`, `a1`)
#
# DROP statements:
#
ALTER TABLE `util_test_f`.`t2` DROP INDEX `id`;
ALTER TABLE `util_test_f`.`t2` DROP INDEX `a1`;
ALTER TABLE `util_test_f`.`t2` DROP INDEX `id3`;
#
#
# ...done.
Test case 9 - check redundancy in indexes with multiple columns, include drops
WARNING: Using a password on the command line interface can be insecure.
# Source on XXXX-XXXX: ... connected.
# Checking indexes...
# Getting indexes for util_test_g.t1
# The following indexes are duplicates or redundant for table util_test_g.t1:
#
CREATE UNIQUE INDEX `id` ON `util_test_g`.`t1` (`id`, `a1`) USING BTREE
#     may be redundant or duplicate of:
ALTER TABLE `util_test_g`.`t1` ADD PRIMARY KEY (`id`)
#
CREATE INDEX `bti4` ON `util_test_g`.`t1` (`a1`, `a3`) USING BTREE
#     may be redundant or duplicate of:
CREATE UNIQUE INDEX `bti2` ON `util_test_g`.`t1` (`a1`, `a3`, `a4`) USING BTREE
#
CREATE INDEX `bti3` ON `util_test_g`.`t1` (`a1`, `a2`) USING BTREE
#     may be redundant or duplicate of:
CREATE INDEX `bti1` ON `util_test_g`.`t1` (`a1`, `a2`, `a3`) USING BTREE
#
# DROP statements:
#
ALTER TABLE `util_test_g`.`t1` DROP INDEX `id`;
ALTER TABLE `util_test_g`.`t1` DROP INDEX `bti4`;
ALTER TABLE `util_test_g`.`t1` DROP INDEX `bti3`;
#
#
# Getting indexes for util_test_g.t2
# The following index is a duplicate or redundant for table util_test_g.t2:
#
CREATE INDEX `hi5` ON `util_test_g`.`t2` (`b1`, `b2`) 
#     may be redundant or duplicate of:
CREATE INDEX `hi1` ON `util_test_g`.`t2` (`b1`, `b2`) 
#
# DROP statement:
#
ALTER TABLE `util_test_g`.`t2` DROP INDEX `hi5`;
#
#
# Getting indexes for util_test_g.t3
# Table `util_test_g`.`t3` does not contain neither a PRIMARY nor UNIQUE key.
# The following indexes are duplicates or redundant for table util_test_g.t3:
#
CREATE FULLTEXT INDEX `ft` ON `util_test_g`.`t3` (`c`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft2` ON `util_test_g`.`t3` (`a`, `b`, `c`) 
#
CREATE FULLTEXT INDEX `ft3` ON `util_test_g`.`t3` (`a`, `b`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft2` ON `util_test_g`.`t3` (`a`, `b`, `c`) 
#
CREATE FULLTEXT INDEX `ft6` ON `util_test_g`.`t3` (`c`, `a`, `b`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft2` ON `util_test_g`.`t3` (`a`, `b`, `c`) 
#
CREATE FULLTEXT INDEX `ft1` ON `util_test_g`.`t3` (`y`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft4` ON `util_test_g`.`t3` (`a`, `b`, `y`) 
#
CREATE FULLTEXT INDEX `ft5` ON `util_test_g`.`t3` (`y`, `a`, `b`) 
#     may be redundant or duplicate of:
CREATE FULLTEXT INDEX `ft4` ON `util_test_g`.`t3` (`a`, `b`, `y`) 
#
# DROP statements:
#
ALTER TABLE `util_test_g`.`t3` DROP INDEX `ft`;
ALTER TABLE `util_test_g`.`t3` DROP INDEX `ft3`;
ALTER TABLE `util_test_g`.`t3` DROP INDEX `ft6`;
ALTER TABLE `util_test_g`.`t3` DROP INDEX `ft1`;
ALTER TABLE `util_test_g`.`t3` DROP INDEX `ft5`;
#
#
# ...done.
